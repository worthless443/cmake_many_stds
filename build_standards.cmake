#TODO add benchmarks for different CXX standards

function(is_list_same length)
	cmake_parse_arguments(MOD "" "IF" "Else" ${ARGN})
	set(raw_list ${MOD_UNPARSED_ARGUMENTS})
	set(list1)
	foreach(i RANGE ${length})
		list(GET raw_list ${i} n)
		set(list1 ${list1} ${n})
	endforeach()
	math(EXPR length1 "${length} + 1")
	math(EXPR lengthm "(${length1}*2) -1")
	set(list2)
	foreach(i RANGE ${length1} ${lengthm})
		list(GET raw_list ${i} n)
		set(list2 ${list2} ${n})
	endforeach()
	foreach(n RANGE ${length})
		list(GET list1 ${n} x)
		list(GET list2 ${n} y)
		if(x EQUAL y)
			set(EQUAL_TERM TRUE PARENT_SCOPE)
		else()
			set(EQUAL_TERM FALSE PARENT_SCOPE)
			break()
		endif()
	endforeach()
endfunction()

function(sort_list outvar)
	cmake_parse_arguments(MOD "" "IF" "Else" ${ARGN})
	set(list1 ${MOD_UNPARSED_ARGUMENTS})
	list(LENGTH list1 _len)
	math(EXPR len1 "${_len} - 1")
	math(EXPR len "${_len} - 2")
	math(EXPR endl "${len}*2")
	set(tmp_list ${list1})
	while(TRUE)
		foreach(n RANGE ${len})
			list(GET list1 ${n} x)
			math(EXPR n1 "${n} + 1")
			list(GET list1 ${n1} y)
			if(x LESS y)
				list(INSERT list1 ${n} ${y})
				list(INSERT list1 ${n1} ${x})
				math(EXPR n2 "${n1} + 1")
				list(REMOVE_AT list1 ${n2})
				list(REMOVE_AT list1 ${n2})
			endif()
		endforeach()
		is_list_same(${len1} ${list1} ${tmp_list})
		if(EQUAL_TERM)
			break()
		endif()
		set(tmp_list ${list1})
	endwhile()
	set(${outvar} ${list1} PARENT_SCOPE)
endfunction()

function(get_most_latest_std_version downto outvar)
	set(latests)
	set(std_versions)
	foreach(feature ${CMAKE_CXX_COMPILE_FEATURES})
		if(feature MATCHES "cxx_std_([0-9]+)")
			string(REGEX REPLACE "_" ";" _tmp_list ${feature})
			list(GET _tmp_list 2 std_version)
			set(std_versions ${std_versions} ${std_version}) 
		endif()
	endforeach()
	sort_list(latest_std_versions ${std_versions})
	list(LENGTH latest_std_versions len)
	math(EXPR ${len} "${len}-1")	
	foreach(n RANGE ${len})
		list(GET latest_std_versions ${n} ver)
		if(${ver} LESS 90)
			set(latests ${latests} ${ver})
		endif()
		if(${n} GREATER_EQUAL ${downto})
			break()
		endif()
	endforeach()
	set(${outvar} ${latests} PARENT_SCOPE)
endfunction()

function(add_executable_with_all_std_versions downto target) 
	cmake_parse_arguments(MOD "" "IF" "Else" ${ARGN})
	set(list1 ${MOD_UNPARSED_ARGUMENTS})
	get_most_latest_std_version(${downto} latest_std_versions)
	list(LENGTH latest_std_versions len)
	math(EXPR len "${len}-1" )
	foreach(i RANGE ${len})
		list(GET latest_std_versions ${i} std)
		set(target_std "${target}_${std}" )
		add_executable(${target_std} ${list1})
		target_compile_features(${target_std} PUBLIC cxx_std_${std})
		target_compile_options(${target_std} PUBLIC -std=c++${std} -O3)
		message(STATUS "adding latest C++ standard versions for ${CMAKE_CXX_COMPILER_ID} - C++${std} - target \"${target}\"")
	endforeach()
endfunction()


